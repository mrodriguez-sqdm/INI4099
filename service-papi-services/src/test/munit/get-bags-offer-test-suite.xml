<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="service-papi-services-test-suite.xml" />
	<munit:test name="service-papi-services-test-suite-get:\v1\bagsOffer:service-papi-services-configTest" doc:id="4dd8e6ff-706d-409e-9f3f-ddf6710f515d" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" doc:id="370af15b-80eb-4ac4-8b20-bee4d9d2e6eb" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="526bddda-e9f4-4f5e-91d2-a2963fc513d0" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="526bddda-e9f4-4f5e-91d2-a2963fc513d0" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/java&#10;---&#10;[&#10;	{&#10;		"Num_Agrupacion": 1,&#10;		"Nombre_Bolsa": "bolsa 1"&#10;	}&#10;]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when Request to get product offer from CMP_OFERTA_PRODUCTO" doc:id="a613c3c6-d235-4e2b-8353-994e1947f940" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="POST" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get product offer from CMP_OFERTA_PRODUCTO" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration_mongo" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.productOffer}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json&#10;---&#10;[&#10;	{&#10;		"num_agrupacion": 1,&#10;		"id_producto": "id1",&#10;		"producto": "p1",&#10;		"valor_espec_tecnica_oferta": [&#10;			{&#10;				"valor": "PLANES POSPAGO"&#10;			}&#10;		]&#10;	}&#10;]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\v1\bagsOffer:service-papi-services-config" doc:id="b1e987d7-c37b-450c-b420-0d592a965a26" name="get:\v1\bagsOffer:service-papi-services-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify call to Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" doc:id="266121ca-93d8-44f5-9c3e-76d96dfaf6d1" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration_mongo" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration_mongo" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify call to Request to get product offer from CMP_OFERTA_PRODUCTO" doc:id="6881ff80-439b-461f-9599-478e0c549891" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="POST" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get product offer from CMP_OFERTA_PRODUCTO" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration_mongo" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.productOffer}" attributeName="path" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:assert-that doc:name="Assert that response is not null" doc:id="1f1c39e5-a783-41c8-8445-fa86ac6a49f3" is="#[MunitTools::notNullValue()]" expression="#[payload]" />
		</munit:validation>
	</munit:test>
	<munit:test name="service-papi-services-test-suite-get:\v1\bagsOffer:service-papi-services-configTestCommercialCatalogEmptyError" doc:id="4fc4eb02-6df4-4ca5-9935-c45c03d76792" description="Test" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" doc:id="1b169c95-1999-406f-9be5-acf00b20da7d" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="526bddda-e9f4-4f5e-91d2-a2963fc513d0" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="526bddda-e9f4-4f5e-91d2-a2963fc513d0" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/java&#10;---&#10;{&#10;  "status": 404,&#10;  "code": "NOT_FOUND",&#10;  "message": {&#10;    "message": "There are no matching records"&#10;  },&#10;  "messageServer": "",&#10;  "cause": [&#10;    {&#10;      "origin": "mongo-sapi-services",&#10;      "message": "org.mule.extension.http.api.request.validator.ResponseValidatorTypedException"&#10;    }&#10;  ]&#10;}]' />
					<munit-tools:error typeId="HTTP:NOT_FOUND" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\v1\bagsOffer:service-papi-services-config" doc:id="6a5ac5ca-0875-4f3d-a8ab-56cc38370b43" name="get:\v1\bagsOffer:service-papi-services-config" />
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify call to Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" doc:id="9ae0ff0f-6abd-43ec-9bb3-7928dd5de568" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration_mongo" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration_mongo" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:assert-equals doc:name="Assert equals payload" doc:id="ddfda4ad-638a-4b64-9f92-9af9837dd374" actual="#[payload]" expected='#[{&#10;  "status": 404,&#10;  "code": "NOT_FOUND",&#10;  "message": {&#10;    "message": "commercial catalog is empty"&#10;  },&#10;  "messageServer": "",&#10;  "cause": [&#10;    {&#10;      "origin": "mvne-xapi-services",&#10;      "message": "org.mule.runtime.api.exception.DefaultMuleException"&#10;    }&#10;  ]&#10;}]' message="Payload not match"/>
			<munit-tools:assert-equals doc:name="Assert equals status code" doc:id="8ef15ac0-9fd3-44e9-a72f-763fd4cac0d7" actual="#[vars.httpStatus]" expected='#[404]' message="Status code not match" />
		</munit:validation>
	</munit:test>
	<munit:test name="service-papi-services-test-suite-get:\v1\bagsOffer:service-papi-services-configTestProductOfferEmptyError" doc:id="d3fb20b2-62fe-470d-b4d1-0f05683f4451" description="Test" >
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock when Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" doc:id="66eecf1d-7f70-41cc-8c20-b7e5a82a105e" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="526bddda-e9f4-4f5e-91d2-a2963fc513d0" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="526bddda-e9f4-4f5e-91d2-a2963fc513d0" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/java&#10;---&#10;[&#10;	{&#10;		"Num_Agrupacion": 1,&#10;		"Nombre_Bolsa": "bolsa 1"&#10;	}&#10;]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when Request to get product offer from CMP_OFERTA_PRODUCTO" doc:id="3edcea60-cf55-4502-8c12-7c733b46d86a" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="POST" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get product offer from CMP_OFERTA_PRODUCTO" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration_mongo" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.productOffer}" attributeName="path" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/java&#10;---&#10;{&#10;  "status": 404,&#10;  "code": "NOT_FOUND",&#10;  "message": {&#10;    "message": "There are no matching records"&#10;  },&#10;  "messageServer": "",&#10;  "cause": [&#10;    {&#10;      "origin": "mongo-sapi-services",&#10;      "message": "org.mule.extension.http.api.request.validator.ResponseValidatorTypedException"&#10;    }&#10;  ]&#10;}]' />
					<munit-tools:error typeId="HTTP:NOT_FOUND" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\v1\bagsOffer:service-papi-services-config" doc:id="2988ae1f-c2df-47b8-852a-6fa3bca02211" name="get:\v1\bagsOffer:service-papi-services-config" />
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify call to Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" doc:id="362221a9-946f-4482-9782-1e99127697df" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration_mongo" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
					<munit-tools:with-attribute whereValue="GET" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get commercial catalog from CATALOGO_COMERCIAL_SVAS" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration_mongo" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.commercialCatalog}" attributeName="path" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify call to Request to get product offer from CMP_OFERTA_PRODUCTO" doc:id="154e1c98-6785-487c-aac7-2f264461003e" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="POST" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request to get product offer from CMP_OFERTA_PRODUCTO" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration_mongo" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="${mongo-sapi.path.productOffer}" attributeName="path" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:assert-equals doc:name="Assert equals payload" doc:id="603c4d25-1172-4cd1-8d55-a7671375c316" actual="#[payload]" expected='#[{&#10;  "status": 404,&#10;  "code": "NOT_FOUND",&#10;  "message": {&#10;    "message": "product offer not found"&#10;  },&#10;  "messageServer": "",&#10;  "cause": [&#10;    {&#10;      "origin": "mvne-xapi-services",&#10;      "message": "org.mule.runtime.api.exception.DefaultMuleException"&#10;    }&#10;  ]&#10;}]' message="Payload not match" />
			<munit-tools:assert-equals doc:name="Assert equals status code" doc:id="052a35c5-8801-44b5-aa36-db9319d01c5b" actual="#[vars.httpStatus]" expected="#[404]" message="Status code not match" />
		</munit:validation>
	</munit:test>


</mule>
